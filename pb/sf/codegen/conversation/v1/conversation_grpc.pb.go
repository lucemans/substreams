// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sf/codegen/conversation/v1/conversation.proto

package pbconvo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conversation_Converse_FullMethodName = "/sf.codegen.conversation.v1.Conversation/Converse"
)

// ConversationClient is the client API for Conversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationClient interface {
	Converse(ctx context.Context, opts ...grpc.CallOption) (Conversation_ConverseClient, error)
}

type conversationClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationClient(cc grpc.ClientConnInterface) ConversationClient {
	return &conversationClient{cc}
}

func (c *conversationClient) Converse(ctx context.Context, opts ...grpc.CallOption) (Conversation_ConverseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conversation_ServiceDesc.Streams[0], Conversation_Converse_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationConverseClient{stream}
	return x, nil
}

type Conversation_ConverseClient interface {
	Send(*UserInput) error
	Recv() (*SystemOutput, error)
	grpc.ClientStream
}

type conversationConverseClient struct {
	grpc.ClientStream
}

func (x *conversationConverseClient) Send(m *UserInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conversationConverseClient) Recv() (*SystemOutput, error) {
	m := new(SystemOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationServer is the server API for Conversation service.
// All implementations should embed UnimplementedConversationServer
// for forward compatibility
type ConversationServer interface {
	Converse(Conversation_ConverseServer) error
}

// UnimplementedConversationServer should be embedded to have forward compatible implementations.
type UnimplementedConversationServer struct {
}

func (UnimplementedConversationServer) Converse(Conversation_ConverseServer) error {
	return status.Errorf(codes.Unimplemented, "method Converse not implemented")
}

// UnsafeConversationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServer will
// result in compilation errors.
type UnsafeConversationServer interface {
	mustEmbedUnimplementedConversationServer()
}

func RegisterConversationServer(s grpc.ServiceRegistrar, srv ConversationServer) {
	s.RegisterService(&Conversation_ServiceDesc, srv)
}

func _Conversation_Converse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConversationServer).Converse(&conversationConverseServer{stream})
}

type Conversation_ConverseServer interface {
	Send(*SystemOutput) error
	Recv() (*UserInput, error)
	grpc.ServerStream
}

type conversationConverseServer struct {
	grpc.ServerStream
}

func (x *conversationConverseServer) Send(m *SystemOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conversationConverseServer) Recv() (*UserInput, error) {
	m := new(UserInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Conversation_ServiceDesc is the grpc.ServiceDesc for Conversation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conversation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.codegen.conversation.v1.Conversation",
	HandlerType: (*ConversationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Converse",
			Handler:       _Conversation_Converse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sf/codegen/conversation/v1/conversation.proto",
}
