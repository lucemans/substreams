// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/codegen/conversation/v1/conversation.proto

package pbconvoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/streamingfast/substreams/pb/sf/codegen/conversation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConversationName is the fully-qualified name of the Conversation service.
	ConversationName = "sf.codegen.conversation.v1.Conversation"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConversationConverseProcedure is the fully-qualified name of the Conversation's Converse RPC.
	ConversationConverseProcedure = "/sf.codegen.conversation.v1.Conversation/Converse"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	conversationServiceDescriptor        = v1.File_sf_codegen_conversation_v1_conversation_proto.Services().ByName("Conversation")
	conversationConverseMethodDescriptor = conversationServiceDescriptor.Methods().ByName("Converse")
)

// ConversationClient is a client for the sf.codegen.conversation.v1.Conversation service.
type ConversationClient interface {
	Converse(context.Context) *connect.BidiStreamForClient[v1.UserInput, v1.SystemOutput]
}

// NewConversationClient constructs a client for the sf.codegen.conversation.v1.Conversation
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConversationClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConversationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &conversationClient{
		converse: connect.NewClient[v1.UserInput, v1.SystemOutput](
			httpClient,
			baseURL+ConversationConverseProcedure,
			connect.WithSchema(conversationConverseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// conversationClient implements ConversationClient.
type conversationClient struct {
	converse *connect.Client[v1.UserInput, v1.SystemOutput]
}

// Converse calls sf.codegen.conversation.v1.Conversation.Converse.
func (c *conversationClient) Converse(ctx context.Context) *connect.BidiStreamForClient[v1.UserInput, v1.SystemOutput] {
	return c.converse.CallBidiStream(ctx)
}

// ConversationHandler is an implementation of the sf.codegen.conversation.v1.Conversation service.
type ConversationHandler interface {
	Converse(context.Context, *connect.BidiStream[v1.UserInput, v1.SystemOutput]) error
}

// NewConversationHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConversationHandler(svc ConversationHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	conversationConverseHandler := connect.NewBidiStreamHandler(
		ConversationConverseProcedure,
		svc.Converse,
		connect.WithSchema(conversationConverseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.codegen.conversation.v1.Conversation/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConversationConverseProcedure:
			conversationConverseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConversationHandler returns CodeUnimplemented from all methods.
type UnimplementedConversationHandler struct{}

func (UnimplementedConversationHandler) Converse(context.Context, *connect.BidiStream[v1.UserInput, v1.SystemOutput]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sf.codegen.conversation.v1.Conversation.Converse is not implemented"))
}
